procedure main() -> (main/RET_VAL : Bv32)
{
    var main/RET_VAL : Bv32
    var main/call : Bv32
    var main/__output_selector0 : Bv8

    loc $0 entry 
    loc $1 final 
    loc $2
    loc $3
    loc $4
    loc $5
    loc $6
    loc $7
    loc $8

    transition $0 -> $2
        assume true
    {
    };

    transition $2 -> $3
        assume true
    {
        main/call := undef;
    };

    transition $3 -> $8
        assume true
        call main/while.cond(main/call, main/__output_selector0 <= main/while.cond/__output_selector);

    transition $8 -> $4
        assume main/__output_selector0=0bv8
    {
    };

    transition $8 -> $6
        assume main/__output_selector0=1bv8
    {
    };

    transition $4 -> $5
        assume true
    {
    };

    transition $5 -> $1
        assume true
    {
        main/RET_VAL := 0bv32;
    };

    transition $6 -> $7
        assume true
    {
    };

}
procedure main/while.cond(main/while.cond/call : Bv32) -> (main/while.cond/__output_selector : Bv8)
{
    var main/while.cond/call10 : Bv32
    var main/while.cond/cmp : Bool
    var main/while.cond/cmp11 : Bool
    var main/while.cond/. : Bv32
    var main/while.cond/cmp51 : Bool
    var main/while.cond/cmp53 : Bool
    var main/while.cond/or.cond : Bool
    var main/while.cond/__output_selector : Bv8

    loc $0 entry 
    loc $1 final 
    loc $2
    loc $3
    loc $4
    loc $5
    loc $6

    transition $0 -> $2
        assume true
    {
    };

    transition $2 -> $3
        assume true
    {
        main/while.cond/call10 := undef;
        main/while.cond/cmp := main/while.cond/call10=0bv32;
    };

    transition $3 -> $1
        assume main/while.cond/cmp
    {
        main/while.cond/__output_selector := 0bv8;
    };

    transition $3 -> $4
        assume not main/while.cond/cmp
    {
    };

    transition $4 -> $5
        assume true
    {
        main/while.cond/cmp11 := not (main/while.cond/call=0bv32);
        main/while.cond/. := if main/while.cond/cmp11 then 1bv32 else 0bv32;
        main/while.cond/cmp51 := not (main/while.cond/call=0bv32);
        main/while.cond/cmp53 := not (main/while.cond/.=1bv32);
        main/while.cond/or.cond := main/while.cond/cmp51 and main/while.cond/cmp53;
    };

    transition $5 -> $1
        assume main/while.cond/or.cond
    {
        main/while.cond/__output_selector := 1bv8;
    };

    transition $5 -> $6
        assume not main/while.cond/or.cond
    {
    };

    transition $6 -> $1
        assume true
        call main/while.cond(main/while.cond/call, main/while.cond/__output_selector <= main/while.cond/__output_selector);

}
